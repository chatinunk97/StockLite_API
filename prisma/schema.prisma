// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//postgresql
//Script for changing the starting primary key

//-- Create a new sequence for the shelfItemId column
//CREATE SEQUENCE shelves_shelfItemId_seq START WITH 6001;

//-- Set the default value for the shelfItemId column to use the new sequence
//ALTER TABLE shelves ALTER COLUMN "shelfItemId" SET DEFAULT nextval('shelves_shelfItemId_seq');

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  supervisor
  employee
  admin
}

model User {
  userId         Int            @id @default(autoincrement())
  username       String         @unique @db.VarChar(30)
  firstName      String         @db.VarChar(30)
  lastName       String         @db.VarChar(30)
  password       String         @db.VarChar(225)
  userRole       Role           @default(employee)
  email          String         @unique @db.VarChar(225)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  CompanyProfile CompanyProfile @relation(fields: [companyId], references: [companyId])
  companyId      Int
  active         Boolean        @default(true)
  transaction    Transaction[]
  orderList      OrderList[]

  @@map("users")
}

model CompanyProfile {
  companyId   Int        @id @default(autoincrement())
  companyName String     @unique @db.VarChar(225)
  companyLogo String?    @db.VarChar(225)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User[]
  supplier    Supplier[]

  @@map("companyProfiles")
}

model Supplier {
  supplierId      Int             @id @default(autoincrement())
  supplierName    String          @db.VarChar(225)
  supplierAddress String          @db.VarChar(225)
  supplierTel     String          @db.VarChar(225)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  orderList       OrderList[]
  CompanyProfile  CompanyProfile? @relation(fields: [companyId], references: [companyId])
  companyId       Int

  @@map("suppliers")
}

model OrderList {
  orderId      Int            @id @default(autoincrement())
  receiveDate  DateTime       @default(now())
  sumPrice     Int
  User         User           @relation(fields: [userId], references: [userId])
  userId       Int
  Supplier     Supplier       @relation(fields: [supplierId], references: [supplierId])
  supplierId   Int
  productStock ProductStock[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("orders")
}

model ProductStock {
  stockId        Int            @id @default(autoincrement())
  productName    String         @db.VarChar(225)
  stockQuantity  Int
  pricePerUnit   Int
  expirationDate DateTime?
  OrderList      OrderList      @relation(fields: [orderId], references: [orderId])
  orderId        Int
  refillCount    Int            @default(0)
  ProductShelf   ProductShelf[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("stocks")
}

model ProductShelf {
  shelfItemId               Int                         @id @default(autoincrement())
  productStock              ProductStock                @relation(fields: [stockId], references: [stockId])
  shelfQuantity             Int?
  stockId                   Int
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  TransactionToProductShelf TransactionToProductShelf[]

  @@map("shelves")
}

model Transaction {
  transactionId             Int                         @id @default(autoincrement())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  User                      User                        @relation(fields: [userId], references: [userId])
  userId                    Int
  sumSale                   Int?
  transactionToProductShelf TransactionToProductShelf[]

  @@map("transactions")
}

model TransactionToProductShelf {
  id             Int          @id @default(autoincrement())
  quantity       Int
  productShelf   ProductShelf @relation(fields: [productShelfId], references: [shelfItemId])
  productShelfId Int
  transaction    Transaction  @relation(fields: [transactionId], references: [transactionId])
  transactionId  Int

  @@map("transaction_to_product_shelf")
}
